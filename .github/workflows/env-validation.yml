name: Environment Validation

on:
  push:
    branches: [main, develop, obs/vercel-phase-3]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development

jobs:
  validate-env:
    name: Validate Environment Variables
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: team_VZU6ueb8d87bTfJRAKJwvov5
      VERCEL_PROJECT_ID: prj_zfInTXIxP2XKALlnxO4elLt45Cxa
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel environment variables (Production)
        run: |
          # Use a temp file to avoid cluttering the workspace
          rm -f .vercel.env.production
          vercel env pull .vercel.env.production --environment=production --yes --token "$VERCEL_TOKEN"
          # The validator expects .env.vercel.production; copy the pulled snapshot to that name
          cp .vercel.env.production .env.vercel.production

      - name: Assert required vars exist in Vercel Production (authoritative)
        run: |
          # Query Vercel directly; this is the source of truth for the build
          vercel env ls production --token "$VERCEL_TOKEN" | tee vercel-env-ls.txt
          if ! grep -q "\bVITE_SUPABASE_URL\b" vercel-env-ls.txt; then
            echo "‚ùå Vercel Production is missing VITE_SUPABASE_URL"
            exit 1
          fi
          if ! grep -q "\bVITE_SUPABASE_ANON_KEY\b" vercel-env-ls.txt; then
            echo "‚ùå Vercel Production is missing VITE_SUPABASE_ANON_KEY"
            exit 1
          fi
          echo "‚úÖ Vercel Production lists required VITE_* variables"

      - name: Debug environment variables
        run: |
          echo "üîç Environment variables pulled from Vercel:"
          echo "=========================================="
          if [ -f .env.vercel.production ]; then
            # Show variable names (but not values for security)
            grep -E "^[A-Z_]+=" .env.vercel.production | cut -d'=' -f1 | sort
            echo "=========================================="
            echo "Total variables: $(grep -c "^[A-Z_]+=" .env.vercel.production)"
          else
            echo "‚ùå No environment file found!"
          fi

      - name: Validate environment variables
        run: |
          node scripts/ci-env-validator.cjs production

      - name: Smoke build with pulled Vercel Production env
        run: |
          # Export the pulled env so Vite gets them at build time
          set -a
          source <(grep -E '^[A-Z_]+=' .vercel.env.production | sed 's/\\r$//')
          set +a
          npm run build
          # Extract Supabase URL to verify it was embedded in the bundle
          SUPABASE_URL=$(grep '^VITE_SUPABASE_URL=' .vercel.env.production | cut -d= -f2-)
          if [ -z "$SUPABASE_URL" ]; then
            echo "‚ùå Could not read VITE_SUPABASE_URL from snapshot"
            exit 1
          fi
          # Ensure built assets reference the Supabase URL and do not contain the runtime missing-env error
          if ! grep -R --binary-files=text -q "$SUPABASE_URL" dist; then
            echo "‚ùå Supabase URL not found in built assets; envs may not have been injected"
            exit 1
          fi
          if grep -R --binary-files=text -q "Missing Supabase environment variables" dist; then
            echo "‚ùå Built bundle contains missing-env error string"
            exit 1
          fi
          echo "‚úÖ Smoke build verified: envs injected and no missing-env error in bundle"

      - name: Cleanup temp files
        if: always()
        run: |
          rm -f .vercel.env.production vercel-env-ls.txt .env.vercel.production

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: env-validation-report
          path: |
            .vercel.env.production
            scripts/env-schema.json
          retention-days: 7

  validate-local-env:
    name: Validate Local Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      VERCEL_ORG_ID: team_VZU6ueb8d87bTfJRAKJwvov5
      VERCEL_PROJECT_ID: prj_zfInTXIxP2XKALlnxO4elLt45Cxa

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate local environment schema
        run: |
          # Check if schema file exists and is valid JSON
          node -e "JSON.parse(require('fs').readFileSync('scripts/env-schema.json', 'utf8')); console.log('‚úÖ Schema is valid JSON')"

          # Validate schema structure
          node -e "
            const schema = JSON.parse(require('fs').readFileSync('scripts/env-schema.json', 'utf8'));
            const required = ['name', 'version', 'environments', 'validation', 'security'];
            const missing = required.filter(key => !schema[key]);
            if (missing.length > 0) {
              console.error('‚ùå Schema missing required fields:', missing.join(', '));
              process.exit(1);
            }
            console.log('‚úÖ Schema structure is valid');
          "

      - name: Test environment validator script
        run: |
          # Test that the validator script can be loaded
          node -e "
            const validator = require('./scripts/ci-env-validator.cjs');
            console.log('‚úÖ Validator script loads successfully');
          "

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          # Check for hardcoded secrets in code
          echo "üîç Scanning for potential secrets..."

          # Check for common secret patterns
          if grep -r -E "(sk-[A-Za-z0-9]{48}|eyJ[A-Za-z0-9+/=]{100,})" src/ --exclude-dir=node_modules; then
            echo "‚ùå Potential secrets found in source code!"
            exit 1
          fi

          # Check for .env files in git
          if git ls-files | grep -E "\.env$|\.env\." | grep -v ".env.example"; then
            echo "‚ùå .env files should not be committed to git!"
            exit 1
          fi

          echo "‚úÖ No secrets found in source code"

      - name: Validate environment schema security
        run: |
          node -e "
            const schema = JSON.parse(require('fs').readFileSync('scripts/env-schema.json', 'utf8'));
            
            // Check that security rules are defined
            if (!schema.security || !schema.security.neverExposeToClient) {
              console.error('‚ùå Security rules not defined in schema');
              process.exit(1);
            }
            
            // Check that sensitive variables are marked as never expose
            const sensitive = ['OPENAI_API_KEY'];
            const notMarked = sensitive.filter(key => !schema.security.neverExposeToClient.includes(key));
            if (notMarked.length > 0) {
              console.error('‚ùå Sensitive variables not marked as never expose:', notMarked.join(', '));
              process.exit(1);
            }
            
            console.log('‚úÖ Security schema is properly configured');
          "
