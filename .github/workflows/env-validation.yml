name: Environment Validation

on:
  push:
    branches: [main, develop, obs/vercel-phase-3]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development

jobs:
  validate-env:
    name: Validate Environment Variables
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: team_VZU6ueb8d87bTfJRAKJwvov5
      VERCEL_PROJECT_ID: prj_zfInTXIxP2XKALlnxO4elLt45Cxa
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel environment variables
        run: |
          vercel env pull .env.vercel.production --environment=production --yes --token "$VERCEL_TOKEN"

      - name: Validate environment variables
        run: |
          node scripts/ci-env-validator.cjs production

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: env-validation-report
          path: |
            .env.vercel.production
            scripts/env-schema.json
          retention-days: 7

  validate-local-env:
    name: Validate Local Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      VERCEL_ORG_ID: team_VZU6ueb8d87bTfJRAKJwvov5
      VERCEL_PROJECT_ID: prj_zfInTXIxP2XKALlnxO4elLt45Cxa

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate local environment schema
        run: |
          # Check if schema file exists and is valid JSON
          node -e "JSON.parse(require('fs').readFileSync('scripts/env-schema.json', 'utf8')); console.log('‚úÖ Schema is valid JSON')"

          # Validate schema structure
          node -e "
            const schema = JSON.parse(require('fs').readFileSync('scripts/env-schema.json', 'utf8'));
            const required = ['name', 'version', 'environments', 'validation', 'security'];
            const missing = required.filter(key => !schema[key]);
            if (missing.length > 0) {
              console.error('‚ùå Schema missing required fields:', missing.join(', '));
              process.exit(1);
            }
            console.log('‚úÖ Schema structure is valid');
          "

      - name: Test environment validator script
        run: |
          # Test that the validator script can be loaded
          node -e "
            const validator = require('./scripts/ci-env-validator.cjs');
            console.log('‚úÖ Validator script loads successfully');
          "

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          # Check for hardcoded secrets in code
          echo "üîç Scanning for potential secrets..."

          # Check for common secret patterns
          if grep -r -E "(sk-[A-Za-z0-9]{48}|eyJ[A-Za-z0-9+/=]{100,})" src/ --exclude-dir=node_modules; then
            echo "‚ùå Potential secrets found in source code!"
            exit 1
          fi

          # Check for .env files in git
          if git ls-files | grep -E "\.env$|\.env\." | grep -v ".env.example"; then
            echo "‚ùå .env files should not be committed to git!"
            exit 1
          fi

          echo "‚úÖ No secrets found in source code"

      - name: Validate environment schema security
        run: |
          node -e "
            const schema = JSON.parse(require('fs').readFileSync('scripts/env-schema.json', 'utf8'));
            
            // Check that security rules are defined
            if (!schema.security || !schema.security.neverExposeToClient) {
              console.error('‚ùå Security rules not defined in schema');
              process.exit(1);
            }
            
            // Check that sensitive variables are marked as never expose
            const sensitive = ['OPENAI_API_KEY', 'SENTRY_AUTH_TOKEN'];
            const notMarked = sensitive.filter(key => !schema.security.neverExposeToClient.includes(key));
            if (notMarked.length > 0) {
              console.error('‚ùå Sensitive variables not marked as never expose:', notMarked.join(', '));
              process.exit(1);
            }
            
            console.log('‚úÖ Security schema is properly configured');
          "
